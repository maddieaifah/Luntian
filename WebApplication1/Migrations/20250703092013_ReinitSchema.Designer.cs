// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250703092013_ReinitSchema")]
    partial class ReinitSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Models.Barangay", b =>
                {
                    b.Property<int>("BarangayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BarangayId"));

                    b.Property<string>("BarangayMasterPCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BarangayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Polygon>("Geom")
                        .HasColumnType("geometry");

                    b.Property<string>("SubLocality")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BarangayId");

                    b.HasIndex("BarangayMasterPCode");

                    b.ToTable("Barangays");

                    b.HasData(
                        new
                        {
                            BarangayId = 1,
                            BarangayMasterPCode = "PH1303901630",
                            BarangayName = "Barangay 630",
                            ContactNumber = "09123456789",
                            Email = "barangay630@manila.gov.ph",
                            FullAddress = "Sta. Mesa, Manila",
                            SubLocality = "Sta. Mesa"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.BarangayMaster", b =>
                {
                    b.Property<string>("ADM4_PCODE")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ADM0_EN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ADM0_PCODE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ADM1_EN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ADM1_PCODE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ADM2_EN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ADM2_PCODE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ADM3_EN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ADM3_PCODE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ADM4_EN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ADM4_REF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Area_SQKM")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Shape_Area")
                        .HasColumnType("float");

                    b.Property<double>("Shape_Leng")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ValidOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("WKT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Geometry>("geom")
                        .HasColumnType("geometry");

                    b.HasKey("ADM4_PCODE");

                    b.ToTable("BarangayMasters");
                });

            modelBuilder.Entity("WebApplication1.Models.Citizen", b =>
                {
                    b.Property<int>("CitizenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CitizenId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CitizenId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Citizens");

                    b.HasData(
                        new
                        {
                            CitizenId = 1,
                            Address = "Sample Street, Manila",
                            Age = 25,
                            FirstName = "Juan",
                            LastName = "Dela Cruz",
                            Sex = "Male",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int>("CitizenId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.HasIndex("CitizenId");

                    b.HasIndex("EventId");

                    b.HasIndex("ReportId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("WebApplication1.Models.Official", b =>
                {
                    b.Property<int>("OfficialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficialId"));

                    b.Property<int>("BarangayId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OfficialId");

                    b.HasIndex("BarangayId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Officials");

                    b.HasData(
                        new
                        {
                            OfficialId = 1,
                            BarangayId = 1,
                            ContactNumber = "09999999999",
                            FirstName = "Maria",
                            LastName = "Santos",
                            Position = "Barangay Captain",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<int?>("BarangayId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CitizenId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HazardLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Point>("LocationGeom")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<string>("LocationText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriorityLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReportId");

                    b.HasIndex("BarangayId");

                    b.HasIndex("CitizenId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("WebApplication1.Models.ReportHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<string>("ActionTaken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OfficialId")
                        .HasColumnType("int");

                    b.Property<string>("OldStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("SolutionImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("HistoryId");

                    b.HasIndex("OfficialId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportHistories");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "citizen@example.com",
                            PasswordHash = "citizen123",
                            Role = "Citizen"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "official@example.com",
                            PasswordHash = "official123",
                            Role = "Official"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.VolunteerEvent", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int>("BarangayId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Point>("LocationGeom")
                        .HasColumnType("geometry");

                    b.Property<string>("LocationText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OfficialId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventId");

                    b.HasIndex("BarangayId");

                    b.HasIndex("OfficialId");

                    b.ToTable("VolunteerEvents");
                });

            modelBuilder.Entity("WebApplication1.Models.Barangay", b =>
                {
                    b.HasOne("WebApplication1.Models.BarangayMaster", "BarangayMaster")
                        .WithMany("Barangays")
                        .HasForeignKey("BarangayMasterPCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BarangayMaster");
                });

            modelBuilder.Entity("WebApplication1.Models.Citizen", b =>
                {
                    b.HasOne("WebApplication1.Models.User", "User")
                        .WithOne("CitizenProfile")
                        .HasForeignKey("WebApplication1.Models.Citizen", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Notification", b =>
                {
                    b.HasOne("WebApplication1.Models.Citizen", "Citizen")
                        .WithMany("Notifications")
                        .HasForeignKey("CitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.VolunteerEvent", "Event")
                        .WithMany("Notifications")
                        .HasForeignKey("EventId");

                    b.HasOne("WebApplication1.Models.Report", "Report")
                        .WithMany("Notifications")
                        .HasForeignKey("ReportId");

                    b.Navigation("Citizen");

                    b.Navigation("Event");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("WebApplication1.Models.Official", b =>
                {
                    b.HasOne("WebApplication1.Models.Barangay", "Barangay")
                        .WithMany("Officials")
                        .HasForeignKey("BarangayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.User", "User")
                        .WithOne("OfficialProfile")
                        .HasForeignKey("WebApplication1.Models.Official", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barangay");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Report", b =>
                {
                    b.HasOne("WebApplication1.Models.Barangay", "Barangay")
                        .WithMany("Reports")
                        .HasForeignKey("BarangayId");

                    b.HasOne("WebApplication1.Models.Citizen", "Citizen")
                        .WithMany("Reports")
                        .HasForeignKey("CitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barangay");

                    b.Navigation("Citizen");
                });

            modelBuilder.Entity("WebApplication1.Models.ReportHistory", b =>
                {
                    b.HasOne("WebApplication1.Models.Official", "Official")
                        .WithMany("ReportHistories")
                        .HasForeignKey("OfficialId");

                    b.HasOne("WebApplication1.Models.Report", "Report")
                        .WithMany("ReportHistories")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Official");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("WebApplication1.Models.VolunteerEvent", b =>
                {
                    b.HasOne("WebApplication1.Models.Barangay", "Barangay")
                        .WithMany("VolunteerEvents")
                        .HasForeignKey("BarangayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Official", "Organizer")
                        .WithMany()
                        .HasForeignKey("OfficialId");

                    b.Navigation("Barangay");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("WebApplication1.Models.Barangay", b =>
                {
                    b.Navigation("Officials");

                    b.Navigation("Reports");

                    b.Navigation("VolunteerEvents");
                });

            modelBuilder.Entity("WebApplication1.Models.BarangayMaster", b =>
                {
                    b.Navigation("Barangays");
                });

            modelBuilder.Entity("WebApplication1.Models.Citizen", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("WebApplication1.Models.Official", b =>
                {
                    b.Navigation("ReportHistories");
                });

            modelBuilder.Entity("WebApplication1.Models.Report", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("ReportHistories");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Navigation("CitizenProfile");

                    b.Navigation("OfficialProfile");
                });

            modelBuilder.Entity("WebApplication1.Models.VolunteerEvent", b =>
                {
                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
